family = student(),  # Adjust if needed (e.g., skew_normal())
prior = c(
prior(normal(0, 0.1), class = "b"),         # Fixed effects priors
prior(normal(0, 0.1), class = "Intercept"), # Prior for intercept
prior(cauchy(0, 1), class = "sd"),          # Random effect priors
prior(cauchy(0, 1), class = "sds")          # Prior for smooth term
),
iter = 4000, warmup = 1000, chains = 4, cores = 4,
control = list(adapt_delta = 0.95)
)
# Model Summary
summary(bayesian_time_model)
library(bayesplot)
# Plot posterior distributions of fixed effects
mcmc_plot(bayesian_time_model, pars = c("b_Condition_Effect", "b_Experiment", "b_Agent_Effect", "b_Match", "b_sEvent_Index_1"))
library(bayesplot)
# Plot posterior distributions of fixed effects
mcmc_plot(bayesian_time_model, pars = c("b_Pre_Post_Effect", "b_Building_Effect", "b_Agent_Effect", "b_Match", "b_sEvent_Index_1"))
# Null Model: No predictors, only random effects
bayesian_model_null <- brm(
Entropy ~ 1 + (1 | ID/Session),
data = df_long,
family = student(),
iter = 4000, warmup = 1000, chains = 4, cores = 4,
control = list(adapt_delta = 0.99)
)
# Compute Bayes Factor (Full Model vs Null Model)
library(bridgesampling)  # Required for Bayes Factor calculations
bayes_factor_full_vs_null <- bayes_factor(bayesian_time_model, bayesian_model_null)
# Compute Bayes Factor (Full Model vs Null Model)
library(bridgesampling)  # Required for Bayes Factor calculations
bayes_factor_full_vs_null <- bayes_factor(bayesian_time_model, bayesian_model_null, recompile = TRUE)
bayesian_time_model$save_pars
bayesian_time_model <- brm(
Entropy ~ Pre_Post_Effect + Building_Effect + Agent_Effect + Match + s(Event_Index) + (1 | ID/Session),
data = df_long,
family = gaussian(),
chains = 4, iter = 2000, warmup = 500,
save_pars = save_pars(all = TRUE),
sample_prior = "no"
)
# Null Model: No predictors, only random effects
bayesian_model_null <- brm(
Entropy ~ 1 + (1 | ID/Session),
data = df_long,
family = gaussian(),
chains = 4, iter = 4000, warmup = 1000,
save_pars = save_pars(all = TRUE)
)
# Compute Bayes Factor (Full Model vs Null Model)
library(bridgesampling)  # Required for Bayes Factor calculations
bayes_factor_full_vs_null <- bayes_factor(bayesian_time_model, bayesian_model_null, recompile = TRUE)
print(bayes_factor_full_vs_null)
# Compute Bayes Factor (Full Model vs Null Model)
# Compute bridge sampling
bridge_full <- bridge_sampler(bayesian_time_model)
bridge_null <- bridge_sampler(bayesian_model_null)
# Compute Bayes Factor
bayes_factor_full_vs_null <- bayes_factor(bridge_full, bridge_null)
# Print the result
print(bayes_factor_full_vs_null)
mcmc_plot(bayesian_time_model)
plot(conditional_effects(bayesian_time_model))
# Load necessary libraries
library(CausalImpact)  # For causal inference and impact analysis
library(dplyr)         # Data manipulation
library(ggplot2)       # Visualization
library(readr)         # Reading CSV files
library(lubridate)     # Working with dates and timestamps
library(zoo)           # Required for time-series data
library(tidyverse)     # Meta-package (includes dplyr, ggplot2, tidyr, etc.)
library(tidyr)         # Data tidying functions
library(brms)          # Bayesian regression modeling via Stan
library(stringr)       # String manipulation (used for ID extraction)
# Load necessary packages
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(-Collider_Number)  # Remove temporary column
# Load and process Experiment 2
exp2_list <- lapply(exp2_files, read_csv)
Experiment2 <- bind_rows(exp2_list) %>%
mutate(Experiment = 2,
Collider_Number = extract_first_two_digits(Collider_Name)) %>%
left_join(labels, by = c("Collider_Name" = "AvatarName")) %>%  # Match agent names
mutate(Building = ifelse(Context == TRUE, "Public", "Residential"),
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(names(Experiment1))  # Ensure same columns as Experiment1
# Combine both experiments
df_combined <- bind_rows(Experiment1, Experiment2)
# View final dataset
head(df_combined)
# Load necessary library for string manipulation
# Split Participant_ID into ID and Session
df_combined <- df_combined %>%
mutate(
ID = str_extract(Participant_ID, "^[^_]+"),  # Extract part before '_'
Session = str_extract(Participant_ID, "(?<=_).*")  # Extract part after '_'
)
# Create Agent_Type based on Collider_Name
df_combined <- df_combined %>%
mutate(
Agent_Type = ifelse(str_detect(Collider_Name, "Cma"), "Active", "Passive"),
Agent_Effect = ifelse(Agent_Type == "Active", 0.5, -0.5)  # Effect coding
)
# Convert new variables to factors
df_combined <- df_combined %>%
mutate(
ID = as.factor(ID),
Session = as.factor(Session),
Agent_Type = as.factor(Agent_Type)
)
df_combined <- df_combined %>%
mutate(
# Define Match (Congruency) using the original rule
Match = ifelse((Experiment == 1 & Agent_Effect == 0.5), 0.5, -0.5),
# Effect coding for Experiment
Experiment = case_when(
Experiment == 1 ~ -0.5,
Experiment == 2 ~ 0.5,
TRUE ~ NaN  # Should never occur but ensures robustness
)
)
# Create Event_Index before reshaping
df_combined <- df_combined %>%
arrange(ID, Session, Gaze_Time) %>%  # Ensure correct chronological order
group_by(ID, Session) %>%
mutate(Event_Index = row_number()) %>%  # Assigns a single index per gaze event
ungroup()
# Display first few rows to verify changes
head(df_combined)
# Reshape the data into long format
df_long <- df_combined %>%
pivot_longer(
cols = c(Pre_Entropy, Post_Entropy),
names_to = "Pre_Post",
values_to = "Entropy"
) %>%
mutate(
# Convert Condition to a factor
Pre_Post = factor(Pre_Post, levels = c("Pre_Entropy", "Post_Entropy")),
# Apply effect coding: -0.5 for Pre_Entropy, 0.5 for Post_Entropy
Pre_Post_Effect = ifelse(Pre_Post == "Pre_Entropy", -0.5, 0.5)
)
# Display first few rows to verify changes
head(df_long)
ggplot(df_long, aes(x = Entropy, fill = Pre_Post)) +
geom_density(alpha = 0.5) +
theme_minimal()
qqnorm(df_long$Entropy)
qqline(df_long$Entropy, col = "red")
bayesian_time_model <- brm(
Entropy ~ Pre_Post_Effect + Building_Effect + Agent_Effect + Match +
s(Event_Index) + (1 | ID/Session),
data = df_long,
family = student(),  # Adjust if needed (e.g., skew_normal())
prior = c(
prior(normal(0, 0.1), class = "b"),         # Fixed effects priors
prior(normal(0, 0.1), class = "Intercept"), # Prior for intercept
prior(cauchy(0, 1), class = "sd"),          # Random effect priors
prior(cauchy(0, 1), class = "sds")          # Prior for smooth term
),
iter = 4000, warmup = 1000, chains = 4, cores = 4,
control = list(adapt_delta = 0.95)
)
bayesian_time_model <- brm(
Entropy ~ Pre_Post_Effect + Building_Effect + Agent_Effect + Match + s(Event_Index) + (1 | ID/Session),
data = df_long,
family = gaussian(),
chains = 4, iter = 8000, warmup = 1000,
save_pars = save_pars(all = TRUE)
)
plot(conditional_smooths(bayesian_time_model, "Event_Index"))
knitr::opts_chunk$set(comment = NA) # To delete all hashtags from output in HTML
library(readr);library(dlookr);library(dplyr);
library(lme4);library(car);library(emmeans);library(MASS);library(jtools);
library(lmerTest);library(gmodels);library(nlme); library(multcompView);
library(ggplot2)
library(sjPlot)
library(sjstats)
emm_options(lmerTest.limit = 10000)
emm_options(pbkrtest.limit = 10000)
# Load necessary libraries
library(CausalImpact)  # For causal inference and impact analysis
library(dplyr)         # Data manipulation
library(ggplot2)       # Visualization
library(readr)         # Reading CSV files
library(lubridate)     # Working with dates and timestamps
library(zoo)           # Required for time-series data
library(tidyverse)     # Meta-package (includes dplyr, ggplot2, tidyr, etc.)
library(tidyr)         # Data tidying functions
library(brms)          # Bayesian regression modeling via Stan
library(stringr)       # String manipulation (used for ID extraction)
conditional_smooths(bayesian_time_model, "Event_Index")
# Load necessary packages
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(-Collider_Number)  # Remove temporary column
# Load necessary libraries
library(CausalImpact)  # For causal inference and impact analysis
library(dplyr)         # Data manipulation
library(ggplot2)       # Visualization
library(readr)         # Reading CSV files
library(lubridate)     # Working with dates and timestamps
library(zoo)           # Required for time-series data
library(tidyverse)     # Meta-package (includes dplyr, ggplot2, tidyr, etc.)
library(tidyr)         # Data tidying functions
library(brms)          # Bayesian regression modeling via Stan
library(stringr)       # String manipulation (used for ID extraction)
# Load necessary packages
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(-Collider_Number)  # Remove temporary column
# Load necessary packages
library(dplyr)
library(readr)
library(stringr)
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(-Collider_Number)  # Remove temporary column
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5))  # Apply effect coding
# Check if Collider_Number exists
glimpse(Experiment1)  # OR View(Experiment1)
# Load necessary packages
library(dplyr)
library(readr)
library(stringr)
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(-Collider_Number)  # Remove temporary column
# Load necessary libraries
library(CausalImpact)  # For causal inference and impact analysis
library(dplyr)         # Data manipulation
library(ggplot2)       # Visualization
library(readr)         # Reading CSV files
library(lubridate)     # Working with dates and timestamps
library(zoo)           # Required for time-series data
library(tidyverse)     # Meta-package (includes dplyr, ggplot2, tidyr, etc.)
library(tidyr)         # Data tidying functions
library(brms)          # Bayesian regression modeling via Stan
library(stringr)       # String manipulation (used for ID extraction)
# Load necessary packages
library(dplyr)
library(readr)
library(stringr)
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(-Collider_Number)  # Remove temporary column
# Load necessary packages
library(dplyr)
library(readr)
library(stringr)
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5))  # Apply effect coding
# Ensure Collider_Number exists before removing it
if ("Collider_Number" %in% colnames(Experiment1)) {
Experiment1 <- Experiment1 %>% dplyr::select(-Collider_Number)
}
# Load and process Experiment 2
exp2_list <- lapply(exp2_files, read_csv)
Experiment2 <- bind_rows(exp2_list) %>%
mutate(Experiment = 2,
Collider_Number = extract_first_two_digits(Collider_Name)) %>%
left_join(labels, by = c("Collider_Name" = "AvatarName")) %>%  # Match agent names
mutate(Building = ifelse(Context == TRUE, "Public", "Residential"),
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
select(names(Experiment1))  # Ensure same columns as Experiment1
# Load necessary libraries
library(CausalImpact)  # For causal inference and impact analysis
library(dplyr)         # Data manipulation
library(ggplot2)       # Visualization
library(readr)         # Reading CSV files
library(lubridate)     # Working with dates and timestamps
library(zoo)           # Required for time-series data
library(tidyverse)     # Meta-package (includes dplyr, ggplot2, tidyr, etc.)
library(tidyr)         # Data tidying functions
library(brms)          # Bayesian regression modeling via Stan
library(stringr)       # String manipulation (used for ID extraction)
# Load necessary packages
library(dplyr)
library(readr)
library(stringr)
# Define directories for each experiment
exp1_dir <- "/Volumes/TwoTeras/0_Experiment_1/Entropy_Results/Window/entropy_results/CausalImpact/"
exp2_dir <- "/Volumes/TwoTeras/1_Experiment_2/Entropy_Results/Window/entropy_results/CausalImpact/"
labels <- read.csv("/Volumes/TwoTeras/Resources/AgentCoordinates_short_exp2.csv")
# List all CSV files in each directory
exp1_files <- list.files(exp1_dir, pattern = "*.csv", full.names = TRUE)
exp2_files <- list.files(exp2_dir, pattern = "*.csv", full.names = TRUE)
# Function to extract first two digits from Collider_Name
extract_first_two_digits <- function(name) {
num <- str_extract(name, "^\\d{2}")  # Extract first two digits
as.numeric(num)  # Convert to numeric
}
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
Experiment1 <- bind_rows(exp1_list) %>%
mutate(Experiment = 1,
Collider_Number = extract_first_two_digits(Collider_Name),  # Extract first two digits
Building = ifelse(Collider_Number <= 28, "Public", "Residential"),  # Assign 'Building'
Building_Effect = ifelse(Building == "Public", 0.5, -0.5))  # Apply effect coding
# Ensure Collider_Number exists before removing it
if ("Collider_Number" %in% colnames(Experiment1)) {
Experiment1 <- Experiment1 %>% dplyr::select(-Collider_Number)
}
# Load and process Experiment 2
exp2_list <- lapply(exp2_files, read_csv)
Experiment2 <- bind_rows(exp2_list) %>%
mutate(Experiment = 2,
Collider_Number = extract_first_two_digits(Collider_Name)) %>%
left_join(labels, by = c("Collider_Name" = "AvatarName")) %>%  # Match agent names
mutate(Building = ifelse(Context == TRUE, "Public", "Residential"),
Building_Effect = ifelse(Building == "Public", 0.5, -0.5)) %>%  # Apply effect coding
dplyr::select(all_of(names(Experiment1)))  # Ensure same columns as Experiment1
# Combine both experiments
df_combined <- bind_rows(Experiment1, Experiment2)
# Check final dataset structure
glimpse(df_combined)
# View first rows to confirm changes
head(df_combined)
# Load and process Experiment 1
exp1_list <- lapply(exp1_files, read_csv)
# Load necessary library for string manipulation
# Split Participant_ID into ID and Session
df_combined <- df_combined %>%
mutate(
ID = str_extract(Participant_ID, "^[^_]+"),  # Extract part before '_'
Session = str_extract(Participant_ID, "(?<=_).*")  # Extract part after '_'
)
# Create Agent_Type based on Collider_Name
df_combined <- df_combined %>%
mutate(
Agent_Type = ifelse(str_detect(Collider_Name, "Cma"), "Active", "Passive"),
Agent_Effect = ifelse(Agent_Type == "Active", 0.5, -0.5)  # Effect coding
)
# Convert new variables to factors
df_combined <- df_combined %>%
mutate(
ID = as.factor(ID),
Session = as.factor(Session),
Agent_Type = as.factor(Agent_Type)
)
df_combined <- df_combined %>%
mutate(
# Define Match (Congruency) using the original rule
Match = ifelse((Experiment == 1 & Agent_Effect == 0.5), 0.5, -0.5),
# Effect coding for Experiment
Experiment = case_when(
Experiment == 1 ~ -0.5,
Experiment == 2 ~ 0.5,
TRUE ~ NaN  # Should never occur but ensures robustness
)
)
# Create Event_Index before reshaping
df_combined <- df_combined %>%
arrange(ID, Session, Gaze_Time) %>%  # Ensure correct chronological order
group_by(ID, Session) %>%
mutate(Event_Index = row_number()) %>%  # Assigns a single index per gaze event
ungroup()
# Display first few rows to verify changes
head(df_combined)
# Reshape the data into long format
df_long <- df_combined %>%
pivot_longer(
cols = c(Pre_Entropy, Post_Entropy),
names_to = "Pre_Post",
values_to = "Entropy"
) %>%
mutate(
# Convert Condition to a factor
Pre_Post = factor(Pre_Post, levels = c("Pre_Entropy", "Post_Entropy")),
# Apply effect coding: -0.5 for Pre_Entropy, 0.5 for Post_Entropy
Pre_Post_Effect = ifelse(Pre_Post == "Pre_Entropy", -0.5, 0.5)
)
# Display first few rows to verify changes
head(df_long)
ggplot(df_long, aes(x = Entropy, fill = Pre_Post)) +
geom_density(alpha = 0.5) +
theme_minimal()
qqnorm(df_long$Entropy)
qqline(df_long$Entropy, col = "red")
bayesian_time_model <- brm(
Entropy ~ Pre_Post_Effect + Building_Effect + Agent_Effect + Match + s(Event_Index) + (1 | ID/Session),
data = df_long,
family = gaussian(),
chains = 4, iter = 4000, warmup = 1000,
save_pars = save_pars(all = TRUE)
)
